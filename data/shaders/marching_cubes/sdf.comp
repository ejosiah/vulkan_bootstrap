#version 460 core

#include "sdf_common.glsl"
#include "sdf_model.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(rgba32f, binding = 0) uniform image3D image;
layout(rgba32f, binding = 1) uniform image3D normalMap;
//layout(rgba32f, binding = 2) uniform image3D colorMap;

float map(vec3 p){
    return sceneSDF(p);
}

void main(){
    vec3 p = vec3(gl_GlobalInvocationID)/vec3(gl_WorkGroupSize * gl_NumWorkGroups);
    p = 2.0 * p - 1.0;

    float d = map(p);
    vec3 normal = 0.5 * calcNormal(p) + 0.5;
    imageStore(image, ivec3(gl_GlobalInvocationID), vec4(d, 0, 0, 1));

    imageStore(normalMap, ivec3(gl_GlobalInvocationID), vec4(normal, 0));
}