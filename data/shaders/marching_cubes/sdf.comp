#version 460 core

#include "sdf_common.glsl"
#include "sdf_model.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(rgba32f, binding = 0) uniform image3D image;
layout(rgba32f, binding = 1) uniform image3D normalMap;
//layout(rgba32f, binding = 2) uniform image3D colorMap;

vec2 hash22(vec2 p)
{
    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx+33.33);
    return fract((p3.xx+p3.yz)*p3.zy);

}


float hash12(vec2 p)
{
    vec3 p3  = fract(vec3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

float noise(vec2 p){
    vec2 i = floor(p);
    vec2 f = fract(p);

    float a = hash12(i);
    float b = hash12(i + vec2(1.0, 0.0));
    float c = hash12(i + vec2(0.0, 1.0));
    float d = hash12(i + vec2(1.0, 1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);
}

float fbm(vec2 p){
    float f = 1;
    float s = noise(f * p);
    s += 0.5 * noise(2 * f * p);
    s += 0.25 * noise(4 * f * p);
    s += 0.125 * noise(8 * f * p);
    return 2 * s/1.875 - 1;
}

float map(vec3 p){
//    const float e = 1E-6;
//    return length(p) - 0.8;
 //   return sceneSDF(p);
    float d = length(p) - 0.5;
    float d1 = p.y + 0.9;
    return smin(d, d1, 0.03);
}

void main(){
    vec3 p = vec3(gl_GlobalInvocationID)/vec3(gl_WorkGroupSize * gl_NumWorkGroups);
    p = 2.0 * p - 1.0;

    float d = map(p);
//    vec3 normal = 0.5 * calcNormal(p) + 0.5;
    imageStore(image, ivec3(gl_GlobalInvocationID), vec4(d, 0, 0, 1));

//    imageStore(normalMap, ivec3(gl_GlobalInvocationID), vec4(normal, 0));
}