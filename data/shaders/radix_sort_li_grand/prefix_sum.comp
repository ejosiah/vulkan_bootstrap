#version 460 core 

#define MAX_N 4096
#define N (Num_Groups)
#define COUNTS 0
#define SUMS 1
#define NEXT_ID 0
#define RADICES_PER_WG 4
#define NUM_RADICES 256

#define BANKS 32
#define LOG_BANKS 5
#define CONFLICT_FREE_OFFSET(n) (((n) >> LOG_BANKS) + ((n) >> (2*LOG_BANKS)))
// Number of extra elements to be stored in the shared memory
// due to conflict free offsets
#define EXTRA_SMEM_ELEMENTS ((N / BANKS) + ((N / BANKS) / BANKS))
#define NUM_SMEM_ELEMENTS (N + EXTRA_SMEM_ELEMENTS)
#define NUM_COUNTS (Radix * gl_NumWorkGroups.x * Num_Groups_per_WorkGroup)

layout(local_size_x=1024) in;

layout(push_constant) uniform Consts{
	uint block;
	uint R;
	uint Radix;
	uint Num_Groups_per_WorkGroup;
	uint Num_Elements_per_WorkGroup;
	uint Num_Elements_Per_Group;
	uint Num_Elements;
	uint Num_Radices_Per_WorkGroup;
	uint Num_Groups;
	uint reorderIndices;
};

layout(set = 0, binding=COUNTS) buffer Counts{
	uint counts[];
};

layout(set = 0, binding=SUMS) buffer Sums{
	uint sums[];
};

shared uint local_counts[MAX_N];
shared uint local_sums[RADICES_PER_WG];

void prefixScan(inout uvec4 v, out uint sum){
	sum = 0;
	uint temp = v.x;
	v.x = sum;
	sum += temp;
	
	temp = v.y;
	v.y = sum;
	sum += temp;

	temp = v.z;
	v.z = sum;
	sum += temp;

	temp = v.w;
	v.w = sum;
	sum += temp;
}


void main(){
	uint thid = gl_LocalInvocationIndex;
	
	for(int i = 0; i < Num_Radices_Per_WorkGroup; i++){	// TODO split into 4 group of 256 threads 
		uint cOffset = gl_WorkGroupID.x * (Num_Radices_Per_WorkGroup * Num_Groups) + i * Num_Groups;

		uint ai = thid;
		uint bi = thid + (N/2);
		uint bankOffsetA = CONFLICT_FREE_OFFSET(ai);
		uint bankOffsetB = CONFLICT_FREE_OFFSET(bi);

		local_counts[ai + bankOffsetA] = counts[ai + cOffset];

		local_counts[bi + bankOffsetB] = counts[bi + cOffset];

		uint offset = 1;
		for(uint d = (N >> 1); d > 0; d >>= 1){
			barrier();
			if(thid < d){
				uint ai = offset * ( 2 * thid+1) -1;
				uint bi = offset * ( 2 * thid+2) -1;

				ai += CONFLICT_FREE_OFFSET(ai);
				bi += CONFLICT_FREE_OFFSET(bi);

				local_counts[bi]  += local_counts[ai];
			}
			offset *= 2;
		}

		if(thid == 0){  
			sums[gl_WorkGroupID.x * Num_Radices_Per_WorkGroup + i] = local_counts[N - 1 + CONFLICT_FREE_OFFSET(N - 1)];
			local_counts[N - 1 + CONFLICT_FREE_OFFSET(N - 1)] = 0;
		}

	    for(uint d = 1; d < N; d *= 2){
			offset >>= 1;
			barrier();
			if(thid < d){
				uint ai = offset * (2 * thid + 1) - 1;
				uint bi = offset * (2 * thid + 2) - 1;

				ai += CONFLICT_FREE_OFFSET(ai);
				bi += CONFLICT_FREE_OFFSET(bi);

				uint t = local_counts[ai];
				local_counts[ai] = local_counts[bi];
				local_counts[bi] += t;
			}
		}
		barrier();

		counts[ai + cOffset] = local_counts[ai + bankOffsetA];
		counts[bi + cOffset] = local_counts[bi + bankOffsetB];

		barrier();
	}
}