#version 460 core

#define PI 3.1415926535897932384626433832795
#define TWO_PI 6.283185307179586476925286766559
#define PI_OVER_4 0.78539816339744830961566084581988

layout(local_size_x = 10, local_size_y = 10) in;

struct Particle{
    vec4 position;
    vec4 color;
    vec3 normal;
    vec3 tangent;
    vec3 bitangent;
    vec2 uv;
};

layout(set = 0, binding = 0) buffer POINT_MASSES_IN{
    Particle particleIn[];
};

layout(set = 1, binding = 0) buffer POINT_MASS_OUT{
    Particle particleOut[];
};

//layout(set = 2, binding = 0) uniform SPHERE_DATA {
//    mat4 xform;
//    vec3 center;
//    float radius;
//} sphere;

layout(set = 2, binding = 0) uniform MODEL_DATA{
    mat4 xform;
    mat4 xformIT;
    int numTriangles;
};

layout(set = 2, binding = 1) buffer TRI_VERTEX_DATA{
    Particle vertices[];
};

layout(set = 2, binding = 2) buffer TRI_INDEX_DATA{
    int indices[];
};

layout(push_constant) uniform SIM_CONSTANTS {
    vec2 inv_cloth_size;
    float timeStep;
    float mass;
    float ksStruct;
    float ksShear;
    float ksBend;
    float kdStruct;
    float kdShear;
    float kdBend;
    float kd;
    float elapsedTime;
};

layout(constant_id = 0) const float gravityY = -9.81f;

vec3 gravity = vec3(0, gravityY, 0);
int width = int(gl_WorkGroupSize.x * gl_NumWorkGroups.x);
int height = int(gl_WorkGroupSize.y * gl_NumWorkGroups.y);
int numPoints = height * width;
int id = int(gl_GlobalInvocationID.y * width + gl_GlobalInvocationID.x);
//int id = int(gl_LocalInvocationIndex);

ivec2 neighbourIndices[12] = {
    ivec2(0, 1), ivec2(1, 0), ivec2(0, -1), ivec2(-1, 0),  // structural neigbhours
    ivec2(-1, 1), ivec2(1, 1), ivec2(-1, -1), ivec2(1, -1),  // shear neigbhours
    ivec2(0, 2), ivec2(0, -2), ivec2(-2, 0), ivec2(2, 0)    // bend neigbhours
};

bool neighbour(int i, out int nid, out ivec2 coord){
    coord = neighbourIndices[i];
    ivec2 index =  coord + ivec2(gl_GlobalInvocationID.xy);
    if(index.x < 0 || index.x >= width || index.y < 0 || index.y >= height){
        return false;
    }
    nid = index.y * width + index.x;
    return true;
}

bool neighbour(int i, out vec3 pos, out vec3 prev_pos, out float ks, out float kd, out float rest_length){
    ivec2 coord;
    int nid;
    if(!neighbour(i, nid, coord)){
        return false;
    }

    pos = particleIn[nid].position.xyz;
    prev_pos = particleOut[nid].position.xyz;

    rest_length = length(coord * inv_cloth_size);
    if(i < 4){
        ks = ksStruct;
        kd = kdStruct;
    }else if(i < 8){
        ks = ksShear;
        kd = kdShear;
    }else if(i < 12){
        ks = ksBend;
        kd = kdBend;
    }

    return true;
}

//void sphereCollisionTest(inout vec3 position){
////    vec3 p = (inverse(sphere.xform) * vec4(position, 1.0)).xyz; // bring into sphere local space
////    float dist = length(p);
////    float d = dist - 1;    // we assume the local sphere is a unit sphere
////    if(d < 0.01){
////        p /= dist;
////        vec4 worldP = sphere.xform * vec4(p, 1.0);
////        position = worldP.xyz;
////    }
//    vec3 x = position - sphere.center;
//    float r = sphere.radius + 0.02;
//    if(length(x) < r){
//        position = sphere.center + r * normalize(x);
//    }
//}

void unpackTriangle(int index, out vec3 a, out vec3 b, out vec3 c){
    int i0 = indices[3 * index + 0];
    int i1 = indices[3 * index + 1];
    int i2 = indices[3 * index + 2];
    a = (xform * vertices[i0].position).xyz;
    b = (xform * vertices[i1].position).xyz;
    c = (xform * vertices[i2].position).xyz;
}


vec3 unpackNormal(int index){
    int i = indices[3 * index + 0];

    return mat3(xformIT) * vertices[i].normal;
}


bool triangleLineTest(vec3 a, vec3 b, vec3 c, vec3 p, vec3 q, out float t){
    vec3 ab = b - a;
    vec3 ac = c - a;
    vec3 qp = p - q;

    vec3 n = cross(ab, ac);

//    float dd = dot(n, p);
//    if(dd < 0){
//        vec3 newP = p + (-qp * (dd - 0.01));
//        qp = newP - q;
//    }

    float d = dot(qp, n);
    if(d <= 0) return false;

    vec3 ap = p - a;
    float ood = 1 / d;
    t = dot(ap, n) * ood;
    if(t < 0) return false;
    if(t > 1) return false;

    vec3 e = cross(qp, ap);
    float v = dot(ac, e);
    if(v < 0 || v > d) return false;
    float w = -dot(ab, e);
    if(w < 0 || v + w > d) return false;

    return true;

}

void collisionTest(vec3 prev_pos, inout vec3 pos){
   // particleOut[id].color = vec4(1, 0, 0, 1);
    for(int i = 0; i < numTriangles; i++){
        vec3 a, b, c;
        unpackTriangle(i, a, b, c);
        float t;
        bool collison = triangleLineTest(a, b, c, prev_pos, pos, t);
        if(collison){
            vec3 dir = pos - prev_pos;
            pos = prev_pos + dir * (t - 0.02);
     //       particleOut[id].color = vec4(0, 1, 0, 1);
        }
    }
}

vec3 calculateNormal(vec3 position){
    ivec2 coord;
    int nid;
    int count = 0;
    vec3 normal = vec3(0);
    for(int i = 1; i <= 4; i++){
        if(!neighbour(i - 1, nid, coord)) continue;
        vec3 A = particleIn[nid].position.xyz - position;

        if(!neighbour(i%4, nid, coord)) continue;
        vec3 B = particleIn[nid].position.xyz - position;
        normal += cross(B, A);
        count++;
    }
    normal /= count;
    return normalize(normal);
}

void main(){
//    float dt = 0.00083;
    float dt = timeStep;
    float inv_dt = 1/dt;
    vec3 pos = particleIn[id].position.xyz;
    vec3 prev_pos = particleOut[id].position.xyz;
    vec3 velocity = (pos - prev_pos) * inv_dt;

    float t = elapsedTime;
    float f = 0.2 * TWO_PI;
    vec3 wind = vec3(0);
   // wind.z *= max(0, cos(f * t));
    vec3 force = mass * gravity + kd * (wind-velocity);

    for(int i = 0; i < 12; i++){
        vec3 nPos;
        vec3 nPrev_pos;
        float ks;
        float kd;
        float l;

        if(!neighbour(i, nPos, nPrev_pos, ks, kd, l)){
            continue;
        }

        vec3 d = nPos - pos;
        vec3 d_norm = normalize(d);
        float dist = length(d);
        vec3 nVelocity = (nPos - nPrev_pos) * inv_dt;

        vec3 f = d_norm * (ks * (dist - l) + kd * dot(nVelocity - velocity, d_norm));

        force += f;
    }

    float inv_mass = 1.0f/mass;
//    if(id == (numPoints - width) || id == (numPoints - 1)){
//        inv_mass = 0;
//    }

    vec3 a = force * inv_mass;

    vec3 p = 2 * pos - prev_pos + a * dt * dt;

//    sphereCollisionTest(p);
//    collisionTest(pos, p);

    float d = dot(p, vec3(0, 1, 0));
    if(d < 0.01){
        p += abs(d) * vec3(0, 1, 0);
    }


    particleOut[id].position.xyz = p;
    particleOut[id].normal = calculateNormal(p);
}