#version 460 core
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#include "../hash.glsl"
#include "point_hash_grid.glsl"

struct Particle{
    vec4 position;
    vec4 color;
    vec3 velocity;
    float invMass;
};

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform Constants {
    layout(offset = 224)
    vec3 resolution;
    float gridSpacing;
    int pass;
    int numParticles;
};

layout(set = 0, binding = 0) buffer POINTS {
    Particle points[];
};

layout(set = 1, binding = 0, scalar) buffer BUCKETS {
    int buckets[];
};

layout(set = 1, binding = 1, scalar) buffer NEXT_BUCKET_INDEX {
    int nextBucketIndex[];
};

layout(set = 2, binding = 0, scalar) buffer BUCKET_SIZES {
    int bucketSize[];
};


void main(){
    int id = int(gl_GlobalInvocationID.x);

    if(id >= numParticles) return;

    vec3 point = points[id].position.xyz;
    int key = getHashKey(point, resolution, gridSpacing);
    if(pass == 0){
        atomicAdd(bucketSize[key], 1);
        return;
    }
    int offset = bucketSize[key];
    int index = offset + atomicAdd(nextBucketIndex[key], 1);

    buckets[index] = id;
}