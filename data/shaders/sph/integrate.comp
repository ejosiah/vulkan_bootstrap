#version 460
#extension GL_EXT_scalar_block_layout : enable

#include "common.glsl"
#include "point_generator.glsl"
#include "..\sampling.glsl"
#include "..\hash.glsl"

layout(local_size_x = 1024) in;

layout(push_constant) uniform Constants{
    layout(offset = 0)
    uint numParticles;
    float time;
    float invMass;
};

layout(set = 0, binding = 0) buffer Points_In{
    vec4 pointsIn[];
};

layout(set = 0, binding = 1, scalar) buffer PData_In{
    ParticleData dataIn[];
};

layout(set = 1, binding = 0) buffer Points_Out{
    vec4 pointsOut[];
};

layout(set = 1, binding = 1, scalar) buffer PData_Out{
    ParticleData dataOut[];
};

layout(set = 2, binding = 0, scalar) buffer Forces{
    vec3 forces[];
};

void main(){
    uvec3 id = gl_GlobalInvocationID;
    uvec3 size = gl_WorkGroupSize * gl_NumWorkGroups;
    uint index = (id.z * size.y + id.y) * size.x + id.x;

    if(index >= numParticles) return;

    vec3 position = pointsIn[index].xyz;
    ParticleData data = dataIn[index];

    vec3 force = forces[index];
    vec3 acceleration = force * invMass;
    vec3 velocity = data.velocity + acceleration * time;
    position = position + velocity * time;

    if(position.y < 0){
        position.y = 0;
        velocity = vec3(0);
    }

    pointsOut[index] = vec4(position, 1);
    dataOut[index].velocity = velocity;

}