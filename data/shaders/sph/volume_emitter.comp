#version 460

#include "common.glsl"
#include "point_generator.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(set = 0, binding = 0) uniform sampler3D sdf;

layout(set = 0, binding = 1) buffer Atomics{
    uint nextId;
};

layout(set = 1, binding = 0) buffer Positions{
    Particle particles[];
};

layout(push_constant) uniform Constants{
    layout(offset = 0)
    vec3 boundingBoxLowerCorner;
    float spacing;
    vec3 boundingBoxUpperCorner;
    int genType;
};

void main(){
    uvec3 id = gl_GlobalInvocationID;
    uvec3 size = gl_WorkGroupSize * gl_NumWorkGroups;
    uint index = (id.z * size.y + id.y) * size.x + id.x;
    float halfSpacing = spacing * 0.5;

    if(shouldExit(boundingBoxLowerCorner, boundingBoxUpperCorner, spacing, genType, id)){
        return;
    }

    vec4 pos = generatePoint(boundingBoxLowerCorner, boundingBoxUpperCorner, spacing, genType, id);
    vec3 uv = remap(pos.xyz, BoundingBox(boundingBoxLowerCorner, boundingBoxUpperCorner), BoundingBox(vec3(0), vec3(1)));

    BoundingBox domain = BoundingBox(boundingBoxLowerCorner, boundingBoxUpperCorner);

    float plane = pos.y - 0.25 * height(domain);
    float sphere = length(pos.xyz - midPoint(domain)) - 0.15 * width(domain);
    float d = min(plane, sphere);

    d = texture(sdf, uv).r;

//    if(d <= 0){
        uint posIndex = atomicAdd(nextId, 1);
        particles[posIndex].position = pos;
        particles[posIndex].color = vec4(1, 0, 0, 1);
//    }
}