#version 460 core
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"
#include "../hash.glsl"
#include "point_hash_grid.glsl"

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform Constants {
    layout(offset = 0)
    vec3 resolution;
    float gridSpacing;
    int pass;
    int numParticles;
};

layout(set = 0, binding = 0) buffer POINTS {
    vec4 points[];
};

layout(set = 1, binding = 0, scalar) buffer BUCKETS {
    int buckets[];
};

layout(set = 1, binding = 1, scalar) buffer NEXT_BUCKET_INDEX {
    int nextBucketIndex[];
};

layout(set = 2, binding = 0, scalar) buffer BUCKET_SIZES {
    int bucketSize[];
};

layout(set = 2, binding = 1, scalar) buffer BUCKET_SIZE_OFFSET {
    int bucketSizeOffset[];
};

layout(set = 3, binding = 0, scalar) buffer NEIGHBOUR_LIST{
    int neighbourList[];
};

layout(set = 4, binding = 0, scalar) buffer NEIGHBOUR_LIST_SIZES{
    int neighbourListSizes[];
};

void main(){
    int id = int(gl_GlobalInvocationID.x);

    if(id >= numParticles) return;

    vec3 origin = points[id].xyz;

    int nearByKeys[8];
    getNearByKeys(origin, gridSpacing, resolution, nearByKeys);

    float radius = gridSpacing * 0.5;
    float radiusSqr = radius * radius;
    if(pass == 0){
        int neighbourListSize = 0;
        for(int i = 0; i < 8; i++){
            int bucketIndex = nearByKeys[i];
            if(bucketIndex < 0) continue;

            int numPointsInBucket = bucketSize[bucketIndex];
            if(numPointsInBucket <= 0) continue;

            int bucketOffset = bucketSizeOffset[bucketIndex];
            for(int j = bucketOffset; j < (bucketOffset + numPointsInBucket); j++){
                int pointIndex = buckets[j];
                vec3 point = points[pointIndex].xyz;
                vec3 d = point - origin;
                if(dot(d, d) <= radiusSqr){
                    neighbourListSize++;
                }
            }
        }
        neighbourListSizes[id] = neighbourListSize;
        return;
    }

    int nextIndex = 0;
    for(int i = 0; i < 8; i++){
        int bucketIndex = nearByKeys[i];
        if(bucketIndex < 0) continue;

        int numPointsInBucket = bucketSize[bucketIndex];

        int bucketOffset = bucketSizeOffset[bucketIndex];

        int offset = neighbourListSizes[id];
        for(int j = bucketOffset; j < (bucketOffset + numPointsInBucket); j++){
            int pointIndex = buckets[j];
            vec3 point = points[pointIndex].xyz;
            vec3 d = point - origin;
            if(dot(d, d) <= radiusSqr){
                int listIndex = nextIndex + offset;
                neighbourList[listIndex]  = pointIndex;
                nextIndex++;
            }
        }
    }
}