#version 460 core#include "../hash.glsl"#include "common.glsl"layout(local_size_x = 1024) in;layout(push_constant) uniform Constants{    layout(offset = 0)    vec3 gravity;    uint numParticles;    float drag;    float time;};layout(set = 0, binding = 0) buffer Points_In{    vec4 pointsIn[];};layout(set = 0, binding = 1) buffer PData_In{    ParticleData dataIn[];};layout(set = 1, binding = 0) buffer Points_Out{    vec4 pointsOut[];};layout(set = 1, binding = 1) buffer PData_Out{    ParticleData dataOut[];};layout(set = 3, binding = 0) uniform sampler3D wind;void main(){    uvec3 id = gl_GlobalInvocationID;    uvec3 size = gl_WorkGroupSize * gl_NumWorkGroups;    uint index = (id.z * size.y + id.y) * size.x + id.x;    if(index >= numParticles) return;    vec3 position = pointsIn[index].xyz;    ParticleData data = dataIn[index];    vec3 force = vec3(0);//    force += -drag * (particle.velocity - texture(wind, particle.position)).xyz;    force += -drag * (data.velocity - vec3(0)); // TODO replace with wind vector field    vec3 acceleration = gravity;    vec3 velocity = data.velocity + acceleration * time;    position = position + velocity * time;//    if(position.x < -1){//        position.x = -0.9;//        velocity.x *= -1;//    }////    if(position.x > 1){//        position.x = 0.9;//        velocity.x *= -1;//    }////    if(position.y < -1){//        position.y = -0.9;//        velocity.y *= -1;//    }////    if(position.y > 1){//        position.y = 0.9;//        velocity.y *= -1;//    }//    if(position.x < -1 || position.x > 1 || position.y < -1 || position.y > 1){//        position.xy = vec2(0, -1);//        velocity.x = hash11(velocity.x + time) - 0.5;//        velocity.y = hash11(velocity.y + time) * 2;//    }    if(position.y < 0){        position.y = 0;        velocity = vec3(0);    }    pointsOut[index] = vec4(position, 1);    dataOut[index].velocity = velocity;}