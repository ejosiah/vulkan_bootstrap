#version 460 core

#include "../hash.glsl"

struct Particle{
    vec4 position;
    vec4 color;
    vec3 velocity;
    float invMass;
};

layout(local_size_x = 1024) in;

layout(push_constant) uniform Constants{
    vec3 gravity;
    uint numParticles;
    float drag;
    float time;
};

layout(set = 0, binding = 0) buffer PARTICLE_IN{
    Particle particleIn[];
};

layout(set = 1, binding = 0) buffer PARTICLE_OUT{
    Particle particleOut[];
};

layout(set = 3, binding = 0) uniform sampler3D wind;

void main(){
    uvec3 size = gl_WorkGroupSize/gl_NumWorkGroups;
    uint id = gl_GlobalInvocationID.x;

    if(id > numParticles) return;
    Particle particle = particleIn[id];
    vec3 force = vec3(0);
//    force += -drag * (particle.velocity - texture(wind, particle.position)).xyz;
    force += -drag * (particle.velocity - vec3(0)); // TODO replace with wind vector field
    vec3 acceleration = gravity;

    vec3 velocity = particle.velocity + acceleration * time;
    vec3 position = particle.position.xyz + velocity * time;

//    if(position.x < -1){
//        position.x = -0.9;
//        velocity.x *= -1;
//    }
//
//    if(position.x > 1){
//        position.x = 0.9;
//        velocity.x *= -1;
//    }
//
//    if(position.y < -1){
//        position.y = -0.9;
//        velocity.y *= -1;
//    }
//
//    if(position.y > 1){
//        position.y = 0.9;
//        velocity.y *= -1;
//    }

    if(position.x < -1 || position.x > 1 || position.y < -1 || position.y > 1){
        position.xy = vec2(0, -1);
        velocity.x = hash11(velocity.x + time) - 0.5;
        velocity.y = hash11(velocity.y + time) * 2;
    }


    particle.velocity = velocity;
    particle.position.xyz = position;
    particleOut[id] = particle;
}