#version 460
#extension GL_EXT_scalar_block_layout : enable

#include "common.glsl"
#include "box_surface.glsl"

layout(local_size_x = 1024) in;

layout(set = 0, binding = 0) buffer Points_Out{
    vec4 pointsOut[];
};

layout(set = 0, binding = 1) buffer PData_Out{
    ParticleData dataOut[];
};


layout(set = 1, binding = 0, scalar) buffer Doman{
    BoxSurface box;
};

layout(push_constant) uniform Constants{
    layout(offset = 0)
    uint numParticles;
    float radius;
    float restitutionCoefficient;
    float frictionCoefficient;
};

void main(){
    uvec3 id = gl_GlobalInvocationID;
    uvec3 size = gl_WorkGroupSize * gl_NumWorkGroups;
    uint index = (id.z * size.y + id.y) * size.x + id.x;

    if(index >= numParticles) return;

    vec3 position = pointsOut[index].xyz;
    vec3 normal;
    vec3 surfacePoint;
    float rc = restitutionCoefficient;
    float fc = frictionCoefficient;

    if(isPenetrating(box, position, radius, normal, surfacePoint)){
        vec3 velocity = dataOut[index].velocity;
        float nDotv = dot(velocity, normal);
        vec3 vn = normal * nDotv;
        vec3 vt = velocity - vn;

        if(nDotv < 0){
            vec3 deltaVn = (-rc - 1) * vn;
            vn *= -rc;

            if(dot(vt, vt) > 0){
                float frictionScale = max(1 - fc * length(deltaVn)/length(vt), 0);
                vt *= frictionScale;
            }
            velocity = vn + vt;
        }
        position = surfacePoint + radius * normal;

        pointsOut[index].xyz = position;
        dataOut[index].velocity = velocity;
    }

}