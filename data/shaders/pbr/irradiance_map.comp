#version 460

#extension GL_EXT_shader_atomic_float : enable
#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"
#include "../octahedral.glsl"

#ifndef PI
#define PI 3.1415926535897932384626
#endif
#define TWO_PI (PI * 2.0)
#define HALF_PI (PI * 0.5)

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D environmentMap;
layout(set = 1, binding = 0, rgba32f) uniform image2D convolutedEnvMap;

vec3 sphereRandom(vec2 r, out float theta) {
    theta = r.y * 2.0 * PI;
    float cosPhi = r.x * 2.0 - 1.0;
    float sinPhi = sqrt(1 - cosPhi * cosPhi);
    return vec3(sinPhi * cos(theta), sinPhi * cos(theta), cosPhi);
}

vec3 totalIrradiance;

vec4 compute(vec2 uv){
    vec3 normal = octDecode(2 * uv - 1);

    vec3 irradiance = vec3(0);

    vec3 up = vec3(0, 1, 0);
    vec3 right = normalize(cross(up, normal));
    up  = normalize(cross(normal, right));

    float sampleDelta = 0.025;
    uint nrSamples = 15625;

    float phi = sampleDelta * float(gl_LocalInvocationID.x);
    float theta = sampleDelta * float(gl_LocalInvocationID.x);
    float offset = sampleDelta * gl_WorkGroupSize.x;

    uint n = uint(sqrt(float(nrSamples)));
    for(int i = 0; i < nrSamples; i++){
        vec2 P = hammersley(i, nrSamples);
        float phi = P.y * 2.0 * PI;
        float cosTheta = 1.0 - P.x;
        float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
        vec3 tangentSample = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
        vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * normal;
        uv = octEncode(normalize(sampleVec)) * 0.5 + 0.5;
        irradiance += texture(environmentMap, uv).rgb * cosTheta * sinTheta;
    }

    irradiance = PI * irradiance * (1/float(nrSamples));
    return vec4(irradiance, 1);
}


void main(){
    vec2 uv = vec2(gl_GlobalInvocationID.yz)/vec2(gl_NumWorkGroups.yz - 1);
    vec4 result = compute(uv);
    imageStore(convolutedEnvMap, ivec2(gl_GlobalInvocationID.yz), result);
}
