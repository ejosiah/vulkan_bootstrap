#version 460

#extension GL_EXT_shader_atomic_float : enable
#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"
#include "../octahedral.glsl"

#ifndef PI
#define PI 3.1415926535897932384626
#endif
#define TWO_PI (PI * 2.0)
#define HALF_PI (PI * 0.5)

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D environmentMap;
layout(set = 1, binding = 0, rgba32f) uniform image2D convolutedEnvMap;

layout(push_constant) uniform Constants{
    float roughness;
};

const uint SAMPLE_COUNT = 1024u;

vec4 compute(vec2 uv){
    vec3 N = octDecode(2 * uv - 1);
    vec3 R = N;
    vec3 V = R;
    vec3 color = texture(environmentMap, uv).rgb;
    const uint SAMPLE_COUNT = 1024u;
    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = hammersley(i, SAMPLE_COUNT);
        vec3 H  = importanceSampleGGX(Xi, N, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0)
        {
            vec2 uv = octEncode(normalize(L)) * 0.5 + 0.5;
            prefilteredColor += texture(environmentMap, uv).rgb * NdotL;
            totalWeight      += NdotL;
        }
    }
    prefilteredColor = prefilteredColor / totalWeight;

    return vec4(prefilteredColor, 1);
}


void main(){
    vec2 uv = vec2(gl_GlobalInvocationID.yz)/vec2(gl_NumWorkGroups.yz - 1);
    vec4 result = compute(uv);
    imageStore(convolutedEnvMap, ivec2(gl_GlobalInvocationID.yz), result);
}