#version 460

#extension GL_EXT_shader_atomic_float : enable
#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform image2D image_out;

shared float A;
shared float B;

uint I = gl_LocalInvocationIndex;
uint SAMPLE_COUNT = gl_WorkGroupSize.x;

vec4 integrate_brdf(float NdotV, float roughness){
    vec3 V = vec3(sqrt(1 - NdotV * NdotV), 0, NdotV);

    A = 0;
    B = 0;

    barrier();

    vec3 N = vec3(0, 0, 1);

    vec2 Xi = hammersley(I, SAMPLE_COUNT);
    vec3 H = importanceSampleGGX(Xi, N, roughness);
    vec3 L = normalize(2 * dot(V, H) * H - V);

    float NdotL = max(L.z, roughness);
    float NdotH = max(H.z, 0);
    float VdotH = max(dot(V, H), 0);

    if(NdotL > 0){
        float G = geometrySmith(N, V, L, roughness);
        float G_Vis = (G * VdotH) / (NdotH * NdotV);
        float Fc = pow(1 - VdotH, 5);

        float a = (1 - Fc) * G_Vis;
        float b = Fc * G_Vis;

        atomicAdd(A, a);
        atomicAdd(B, b);
    }

    barrier();

    if(I == 0){
        A /= float(SAMPLE_COUNT);
        B /= float(SAMPLE_COUNT);
    }

    barrier();

    return vec4(A, B, 0, 0);
}

void main(){
    vec2 uv = vec2(gl_GlobalInvocationID.yz)/vec2(gl_NumWorkGroups.yz - 1);
    float NdotV = uv.x;
    float roughness = uv.y;
    vec4 brdf = integrate_brdf(NdotV, roughness);
    imageStore(image_out, ivec2(gl_GlobalInvocationID.yz), brdf);
}