#version 460 core

#define SHARED_STORAGE_SIZE 2048

layout(local_size_x = 1024) in;

layout(set = 0, binding = 0) buffer DATA {
  int g_data[];
};

layout(set = 0, binding = 1) buffer SUMS {
  int g_sums[];
};

shared int data[SHARED_STORAGE_SIZE];

void scan(inout ivec4 v, out int sum);

void main(){
  int thid  = int(gl_LocalInvocationIndex);
  int gthid = int(gl_GlobalInvocationID.x);
  int n = SHARED_STORAGE_SIZE;

  ivec4 temp0 = ivec4(g_data[8 * gthid + 0], g_data[8 * gthid + 1], g_data[8 * gthid + 2], g_data[8 * gthid + 3]);
  ivec4 temp1 = ivec4(g_data[8 * gthid + 4], g_data[8 * gthid + 5], g_data[8 * gthid + 6], g_data[8 * gthid + 7]);

  int sum = 0;
  scan(temp0, sum);
  data[2 * thid] = sum;

  scan(temp1, sum);
  data[2 * thid + 1] = sum;

  int offset = 1;
  for(int d = (n >> 1); d > 0; d >>= 1){
    barrier();
    if(thid < d){
      int ai = offset * (2 * thid + 1) - 1;
      int bi = offset * (2 * thid + 2) - 1;

      data[bi] += data[ai];
    }
    offset *= 2;
  }

  if(thid == 0){
    int temp = data[n - 1];
    data[n-1] = 0;
    g_sums[gl_WorkGroupID.x] = temp;
  }

  for(int d = 1; d < n; d *= 2){
    offset >>= 1;
    barrier();
    if(thid < d){
      int ai = offset * (2 * thid + 1) - 1;
      int bi = offset * (2 * thid + 2) - 1;

      int temp = data[bi];
      data[bi] = temp + data[ai];
      data[ai] = temp;
    }
  }

  barrier();

  int sum0 = data[2 * thid];
  int sum1 = data[2 * thid + 1];

  temp0.x += sum0;
  temp0.y += sum0;
  temp0.z += sum0;
  temp0.w += sum0;

  temp1.x += sum1;
  temp1.y += sum1;
  temp1.z += sum1;
  temp1.w += sum1;

  g_data[8 * gthid] = temp0.x;
  g_data[8 * gthid + 1] = temp0.y;
  g_data[8 * gthid + 2] = temp0.z;
  g_data[8 * gthid + 3] = temp0.w;


  g_data[8 * gthid + 4] = temp1.x;
  g_data[8 * gthid + 5] = temp1.y;
  g_data[8 * gthid + 6] = temp1.z;
  g_data[8 * gthid + 7] = temp1.w;
}

void scan(inout ivec4 v, out int sum){
  sum = 0;
  int temp = v.x;
  v.x = sum;
  sum += temp;

  temp = v.y;
  v.y = sum;
  sum += temp;

  temp = v.z;
  v.z = sum;
  sum += temp;

  temp = v.w;
  v.w = sum;
  sum += temp;
}