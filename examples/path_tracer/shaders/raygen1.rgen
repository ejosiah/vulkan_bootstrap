#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_debug_printf : require

#define USE_PCG 0
#define MIN_BOUNCES 3

#define RIS_CANDIDATES_LIGHTS 8

// Enable this to cast shadow rays for each candidate during resampling. This is expensive but increases quality

#include "constants.glsl"
#include "ray_tracing_lang.glsl"
#include "random.glsl"
#include "common.glsl"
#include "sampling.glsl"
#include "octahedral.glsl"
#include "util.glsl"
#include "brdf.glsl"
#include "scene.glsl"

layout(set = 0, binding = 0) uniform accelerationStructure topLevelAs;
layout(set = 0, binding = 1) uniform CameraProperties{
    mat4 viewInverse;
    mat4 projInverse;
} cam;
layout(set = 0, binding = 2, rgba32f) uniform image2D image;
layout(set = 0, binding = 3) uniform sampler2D envMap;


layout(set = 4, binding = 0) uniform sampler2D environmentMap;
layout(set = 4, binding = 1) uniform sampler2D pConditionalVFunc;
layout(set = 4, binding = 2) uniform sampler2D pConditionalVCdf;
layout(set = 4, binding = 3) uniform sampler1D pMarginal;
layout(set = 4, binding = 4) uniform sampler1D pMarginalCdf;

layout(push_constant) uniform SceneConstants {
    uint maxBounces;
    uint frame;
    uint currentSample;
    uint numSamples;
    int numLights;
    int adaptiveSampling;
    float worldRadius;
    float pMarginalIntegral;
    uint mask;
    float exposure;
    float skyIntensity;
};

layout(location = 0) rayPayload HitData hitData;
layout(location = 1) rayPayload bool isShadowed;

vec3 loadEnvColor(vec3 direction);

// Calculates probability of selecting BRDF (specular or diffuse) using the approximate Fresnel term
float getBrdfProbability(vec3 V, vec3 sN, vec3 albedo, float metalness);
float getBrdfProbability(HitData surface, vec3 wo);

vec3 evalBrdf(HitData surface, vec3 wo, vec3 wi);

vec3 evalIndirectBrdf(HitData surface, int brdfType, vec3 wo, inout RngStateType rngState, out vec3 wi);

bool sampleLightRIS(inout RngStateType rngState, HitData surface, out LightInfo selectedSampl, out float lightSampleWeight);

LightInfo sampleLight(inout RngStateType rngState, HitData surface, out float lightWeight);

bool isVisisble(LightInfo light, HitData surface);

vec3 getRadiance(Ray ray);

Ray generateRay();

const float Tmin = 0;
const float Tmax = FLT_MAX;

void main(){
    vec3 Lo = vec3(0);
    hitData.rngState  = initRNG(vec2(gl_LaunchID), vec2(gl_LaunchSize), frame);
    Ray ray = generateRay();

    if(adaptiveSampling == 0){
        for(int i = 0; i < numSamples; i++){
            Lo += getRadiance(ray);
        }
        Lo /= numSamples;
        Lo = 1 - exp(-Lo * exposure);
        Lo = linearToSrgb(Lo);
    }else{
        if(currentSample > 10 && currentSample >= numSamples) return;

        Lo = getRadiance(ray);

        Lo = 1 - exp(-Lo * exposure);
        Lo = linearToSrgb(Lo);
        float t = 1/float(currentSample + 1);

        vec3 dst = imageLoad(image, ivec2(gl_LaunchID.xy)).rgb;
        Lo = mix(dst, Lo, t);
    }
    
    imageStore(image, ivec2(gl_LaunchID.xy), vec4(Lo, 1));
}

Ray generateRay(){
    vec2 offset = vec2(rand(hitData.rngState), rand(hitData.rngState));
    const vec2 pixelCenter = vec2(gl_LaunchID.xy) + offset;

    const vec2 uv = pixelCenter/vec2(gl_LaunchSize.xy);
    vec2 d = uv * 2.0 - 1.0;

    vec3 origin = vec3(cam.viewInverse * vec4(0,0,0,1));
    vec3 target = vec3(cam.projInverse * vec4(d.x, d.y, 1, 1));
    vec3 direction = vec3(cam.viewInverse*vec4(normalize(target.xyz), 0));

    return Ray(origin, direction);
}

vec3 getRadiance(Ray ray){
    vec3 Lo = vec3(0);
    vec3 throughput = vec3(1);
    for(uint bounce = 0; bounce < maxBounces; bounce++){
        traceRay(topLevelAs, gl_RayFlagsOpaque, mask, 0, 0, 0, ray.origin, Tmin, ray.direction, Tmax, 0);
        if(!hitData.hit){
            Lo += throughput * loadEnvColor(ray.direction);
            break;
        }

        vec3 wo = -ray.direction;
        //        Surface surface  = getSurfaceData(hitData, wo);
        HitData surface = hitData;
        Lo += throughput * surface.emission;

        // direct light contribution
        float lightWeight;
        LightInfo light;
        if(sampleLightRIS(hitData.rngState, surface, light, lightWeight)){
            if(lightWeight != 0){
                if(bool(shadow_ray_in_ris) || isVisisble(light, surface)){
                    vec3 wi = normalize(light.x - surface.x);
                    Lo += throughput * light.radiance * evalBrdf(surface, wo, wi) * lightWeight;
                }
            }
        }

        if(bounce >= maxBounces - 1){
            break;
        }

        int brdfType;
        if(isMirror(surface)){
            brdfType = BRDF_SPECULAR;
        }else {
            float brdfProbability = getBrdfProbability(surface, wo);
            if(rand(hitData.rngState) < brdfProbability){
                brdfType = BRDF_SPECULAR;
                throughput /= brdfProbability;
            }else{
                brdfType = BRDF_DIFFUSE;
                throughput /= (1 - brdfProbability);
            }
        }

        vec3 brdfWeight = evalIndirectBrdf(surface, brdfType, wo, hitData.rngState, ray.direction);
        if(isBlack(brdfWeight)){
            break;
        }

        throughput *= brdfWeight;
        ray.origin = offsetRay(surface.x, surface.gN);
    }
    return Lo;
}


vec3 loadEnvColor(vec3 direction){
    vec2 suv = sampleSphere(direction);
    return texture(envMap, suv).rgb * skyIntensity;
}

float getBrdfProbability(vec3 V, vec3 sN, vec3 albedo, float metalness) {

    // Evaluate Fresnel term using the shading normal
    // Note: we use the shading normal instead of the microfacet normal (half-vector) for Fresnel term here. That's suboptimal for rough surfaces at grazing angles, but half-vector is yet unknown at this point
    vec3 specularF0 = vec3(luminance(baseColorToSpecularF0(albedo, metalness)));
    float diffuseReflectance = luminance(baseColorToDiffuseReflectance(albedo, metalness));
    float Fresnel = saturate(luminance(evalFresnel(specularF0, shadowedF90(specularF0), max(0.0f, dot(V, sN)))));

    // Approximate relative contribution of BRDFs using the Fresnel term
    float specular = Fresnel;
    float diffuse = diffuseReflectance * (1.0f - Fresnel); //< If diffuse term is weighted by Fresnel, apply it here as well

    // Return probability of selecting specular BRDF over diffuse BRDF
    float p = (specular / max(0.0001f, (specular + diffuse)));

    // Clamp probability to avoid undersampling of less prominent BRDF
    return clamp(p, 0.1f, 0.9f);
}

float getBrdfProbability(HitData surface, vec3 wo){
    return getBrdfProbability(wo, surface.sN, surface.albedo, surface.metalness);
}

vec3 evalBrdf(HitData surface, vec3 wo, vec3 wi){
    BrdfArgs args;
    args.wo = wo;
    args.wi = wi;
    args.surfacePoint = surface.x;
    args.surfaceNormal = surface.sN;
    args.surfaceGeomNormal = surface.gN;
    args.surfaceAlbedo = surface.albedo;
    args.surfaceMetalness = surface.metalness;
    args.surfaceRoughness = surface.roughness;

    return evalCombinedBRDF(args);
}

vec3 evalIndirectBrdf(HitData surface, int brdfType, vec3 wo, inout RngStateType rngState, out vec3 wi){

    BrdfArgs args;
    args.wo = wo;
    args.surfacePoint = surface.x;
    args.surfaceNormal = surface.sN;
    args.surfaceGeomNormal = surface.gN;
    args.surfaceAlbedo = surface.albedo;
    args.surfaceMetalness = surface.metalness;
    args.surfaceRoughness = surface.roughness;
    args.rngState = rngState;
    args.brdfType = brdfType;

    vec3 sampleWeight = evalIndirectCombinedBRDF(args);

    rngState = args.rngState;
    wi = args.wi;
    return sampleWeight;
}

float fallOff(Light light, vec3 pointToLightDir){
    vec3 n = light.normal;
    float cutOff = light.cosWidth;
    float fallOffStart = light.fallOffStart;

    float cos0 = max(0, dot(pointToLightDir, n));
    if(cos0 < cutOff) return 0;
    if(cos0 > fallOffStart) return 1;
    return smoothstep(cutOff, fallOffStart, cos0);
}

bool sampleLightRIS(inout RngStateType rngState, HitData surface, out LightInfo selectedSample, out float lightSampleWeight){
    if(numLights <= 0) return false;

    float totalWeights = 0;
    float samplePdfG = 0;

    for(int i = 0; i < RIS_CANDIDATES_LIGHTS; i++){
        float lightWeight;
        LightInfo light = sampleLight(rngState, surface, lightWeight);
        if(isBlack(light.radiance)){
            continue;
        }


        if(bool(shadow_ray_in_ris) && !isVisisble(light, surface)){
            continue;
        }

        float candidatePdfG = luminance(light.radiance);
        float candidateRISWeight = candidatePdfG * lightWeight;

        totalWeights += candidateRISWeight;
        if(rand(rngState) < (candidateRISWeight / totalWeights)){
            selectedSample = light;
            samplePdfG = candidatePdfG;
        }
    }

    if(totalWeights == 0.0f){
        return false;
    }else {
        lightSampleWeight = (totalWeights / float(RIS_CANDIDATES_LIGHTS)) / samplePdfG;
        return true;
    }

}

LightInfo sampleLight(inout RngStateType rngState, HitData surface, out float lightWeight){
    LightInfo lightInfo;
    lightInfo.radiance = vec3(0);
    lightInfo.sx = surface.x;
    lightInfo.sn = surface.sN;
    lightInfo.pdf = 0;
    lightWeight = 0;
    if(numLights <= 0){
        return lightInfo;
    }
    int id = int(rand(rngState) * numLights);
    Light light = lights[id];
    lightInfo.x = light.position;
    lightInfo.n = light.normal;
    lightInfo.area = light.area;
    lightInfo.flags = light.flags;
    lightInfo.value = light.value;
    lightInfo.pdf = 0.0;

    if(isPositional(light)){
        vec3 wi = light.position - lightInfo.sx;
        lightInfo.wi = normalize(wi);
        lightInfo.dist = length(wi);
        lightInfo.NdotL = clamp(dot(lightInfo.wi, lightInfo.sn), 0.00001, 1);
        lightInfo.pdf = 1;
        lightInfo.radiance = light.value * fallOff(light, -lightInfo.wi) / (lightInfo.dist * lightInfo.dist);
    }

    if(isDistant(light)){
        lightInfo.wi = -light.normal;
        lightInfo.x = lightInfo.sx + lightInfo.wi  * 2 * worldRadius;
        lightInfo.dist = distance(lightInfo.x, lightInfo.sx);
        lightInfo.NdotL = clamp(dot(lightInfo.wi, lightInfo.sn), 0.00001, 1);
        lightInfo.pdf = 1;
        lightInfo.radiance = light.value;
    }

    if(isArea(light)){
        SceneObject sceneObj = sceneObjs[light.instanceId];
        int objId = sceneObj.objId;

        uint primitiveId = uint(floor(rand(rngState) * light.numTriangles));

        Vertex v0, v1, v2;
        getTriangle(objId, mat4x3(1), light.triangleOffset, primitiveId, v0, v1, v2);

        vec2 u = vec2(rand(rngState), rand(rngState));
        vec2 uv = uniformSampleTriangle(u);
        lightInfo.x = u.x * v0.position + u.y * v1.position + (1 - u.x - u.y) * v2.position;
        lightInfo.n = u.x * v0.normal + u.y * v1.normal + (1 - u.x - u.y) * v2.normal;

        vec3 wi = lightInfo.x - lightInfo.sx;
        lightInfo.wi = normalize(wi);
        lightInfo.dist = length(wi);
        lightInfo.NdotL = clamp(dot(lightInfo.wi, lightInfo.sn), 0.00001, 1);
        lightInfo.radiance = light.value;
        lightInfo.pdf = (lightInfo.dist * lightInfo.dist)/(lightInfo.NdotL * light.area);
    }

    if(isInfinite(light)){
        vec2 u = vec2(rand(rngState), rand(rngState));
        float pdf;
        vec2 uv = sampleContinuous2D(pConditionalVFunc, pConditionalVCdf, pMarginal, pMarginalCdf, pMarginalIntegral, u, pdf);
        if(pdf == 0){
            lightInfo.value = vec3(0);
            lightInfo.pdf = 0;
            return lightInfo;
        }
        float sinTheta;
        light.normal = -direction_from_spherical(uv, sinTheta);
        lightInfo.wi = direction_from_spherical(uv, sinTheta);
        lightInfo.x = lightInfo.sx + lightInfo.wi  * 2 * worldRadius;
        lightInfo.dist = distance(lightInfo.x, lightInfo.sx);
        lightInfo.NdotL = clamp(dot(lightInfo.wi, lightInfo.sn), 0.00001, 1);
        lightInfo.pdf = pdf / ( 2 * PI * PI * sinTheta);
        if(sinTheta == 0){
            lightInfo.pdf = 0;
        }
        lightInfo.value = texture(environmentMap, uv).rgb;
        lightInfo.radiance = texture(environmentMap, uv).rgb ;
    }

    lightInfo.radiance = dot(lightInfo.wi, lightInfo.sn) < 0.00001 ? vec3(0) :  lightInfo.radiance;
    lightWeight = 1/lightInfo.pdf;
    return lightInfo;
}

bool isVisisble(LightInfo light, HitData surface){
    isShadowed = true;
    vec3 origin = offsetRay(surface.x, surface.gN);
    vec3 direction = normalize(light.x - surface.x);
    float dist = distance(light.x, surface.x);
    uint flags = gl_RayFlagsTerminateOnFirstHit | gl_RayFlagsSkipClosestHitShader;
    traceRay(topLevelAs, flags, (mask & ~OBJECT_TYPE_LIGHT), 0, 0, 1, origin, 0, direction, dist, 1);

    return !isShadowed;
}