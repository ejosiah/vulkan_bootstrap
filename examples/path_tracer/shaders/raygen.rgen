#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_debug_printf : require

#define USE_PCG 0
#define MIN_BOUNCES 3
// Enable this to cast shadow rays for each candidate during resampling. This is expensive but increases quality

#include "constants.glsl"
#include "ray_tracing_lang.glsl"
#include "random.glsl"
#include "common.glsl"
#include "sampling.glsl"
#include "octahedral.glsl"
#include "util.glsl"
#include "brdf.glsl"
#include "scene.glsl"

layout(set = 0, binding = 0) uniform accelerationStructure topLevelAs;
layout(set = 0, binding = 1) uniform CameraProperties{
    mat4 viewInverse;
    mat4 projInverse;
} cam;
layout(set = 0, binding = 2, rgba32f) uniform image2D image;
layout(set = 0, binding = 3) uniform sampler2D envMap;


layout(set = 4, binding = 0) uniform sampler2D environmentMap;
layout(set = 4, binding = 1) uniform sampler2D pConditionalVFunc;
layout(set = 4, binding = 2) uniform sampler2D pConditionalVCdf;
layout(set = 4, binding = 3) uniform sampler1D pMarginal;
layout(set = 4, binding = 4) uniform sampler1D pMarginalCdf;

#include "scene_push_constants.glsl"

layout(location = 0) rayPayload HitData hitData;

vec3 loadEnvColor(vec3 direction);

vec3 getRadiance(Ray ray);

Ray generateRay(vec2 offset);

const float Tmin = 0;
const float Tmax = FLT_MAX;

void main(){
    vec3 Lo = vec3(0);
    hitData  = createHitData(initRNG(vec2(gl_LaunchID), vec2(gl_LaunchSize), frame));
    Ray ray = generateRay(randomVec2(hitData.rngState));
    if(adaptiveSampling == 0){
        for(int i = 0; i < numSamples; i++){
            Lo += getRadiance(ray);
        }
        Lo /= numSamples;
    }else{
        if(currentSample >= numSamples) return;

        Lo = getRadiance(ray);
        vec3 dst = imageLoad(image, ivec2(gl_LaunchID.xy)).rgb;

        float t = 1/float(currentSample + 1);
        Lo = mix(dst, Lo, t);
    }
    
    imageStore(image, ivec2(gl_LaunchID.xy), vec4(Lo, 1));
}

Ray generateRay(vec2 offset){
    const vec2 pixelCenter = vec2(gl_LaunchID.xy) + offset;

    const vec2 uv = pixelCenter/vec2(gl_LaunchSize.xy);
    vec2 d = uv * 2.0 - 1.0;

    vec3 origin = vec3(cam.viewInverse * vec4(0,0,0,1));
    vec3 target = vec3(cam.projInverse * vec4(d.x, d.y, 1, 1));
    vec3 direction = vec3(cam.viewInverse*vec4(normalize(target.xyz), 0));
    vec3 transmission = vec3(1);
    return Ray(origin, direction, transmission);
}

vec3 getRadiance(Ray ray){
    vec3 Lo = vec3(0);
    vec3 throughput = vec3(1);
    for(uint bounce = 0; bounce < maxBounces; bounce++){
        traceRay(topLevelAs, gl_RayFlagsNoOpaque, mask, 0, 0, 0, ray.origin, Tmin, ray.direction, Tmax, 0);
        if(!hitData.hit){
            Lo += throughput * loadEnvColor(ray.direction);
            break;
        }

        vec3 wo = -ray.direction;
        Lo += throughput * hitData.surface.emission;

        // direct light contribution
        Lo += throughput * hitData.lightContribution;

        if(bounce >= maxBounces - 1){
            break;
        }

        if(bounce > MIN_BOUNCES){
            float rrProbability = min(0.95, luminance(throughput));
            if(rrProbability < rand(hitData.rngState)){
                break;
            }
            throughput /= rrProbability;
        }

        throughput *= hitData.brdfWeight;

        if(isBlack(throughput)) break;

        ray = hitData.ray;
        reset(hitData);
    }
    return Lo;
}


vec3 loadEnvColor(vec3 direction){
    vec2 suv = sampleSphere(direction);
    return texture(envMap, suv).rgb * skyIntensity;
}