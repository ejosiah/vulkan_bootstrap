#version 460
#extension GL_EXT_ray_tracing : enable

#include "ray_tracing_lang.glsl"
#include "common.glsl"

#ifndef FRESNEL_CALLABLE_PARAMS_INDEX
#define FRESNEL_CALLABLE_PARAMS_INDEX 1
#endif

float fresnelDielectric(float cosThetaI, float etaI, float etaT) {
    cosThetaI = clamp(cosThetaI, -1.0, 1.0);
    // Potentially swap indices of refraction
    bool entering = cosThetaI > 0.f;
    if (!entering) {
        swap(etaI, etaT);
        cosThetaI = abs(cosThetaI);
    }

    // Compute _cosThetaT_ using Snell's law
    float sinThetaI = sqrt(max(0, 1 - cosThetaI * cosThetaI));
    float sinThetaT = etaI / etaT * sinThetaI;

    // Handle total internal reflection
    if (sinThetaT >= 1) {
        return 1;
    }
    float cosThetaT = sqrt(max(0, 1 - sinThetaT * sinThetaT));
    float Rparl = ((etaT * cosThetaI) - (etaI * cosThetaT)) /
    ((etaT * cosThetaI) + (etaI * cosThetaT));
    float Rperp = ((etaI * cosThetaI) - (etaT * cosThetaT)) /
    ((etaI * cosThetaI) + (etaT * cosThetaT));
    return (Rparl * Rparl + Rperp * Rperp) / 2;
}

float fresnel(float cosTheta, float etaI, float etaT) {
    //return fresnelSchlick(cosTheta, f0(etaI, etaT));
    return fresnelDielectric(cosTheta, etaI, etaT);
}

layout(location = FRESNEL_CALLABLE_PARAMS_INDEX) callableDataIn FresnelParams params;

void main(){

}