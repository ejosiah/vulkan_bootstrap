#version 450

#define IX(i, j) (int(i)+(N+2)*int(j))
#define LEFT 0
#define RIGHT 1
#define BOTTOM 2
#define TOP 3
layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0) buffer VECTOR_U {
    float u[];
};

layout(set = 0, binding = 1) buffer VECTOR_v {
    float v[];
};

layout(set = 1, binding = 0) uniform  sampler2D colorIn;

layout(set = 2, binding = 0, rgba32f) uniform image2D colorOut;

layout(push_constant) uniform Constants {
    int N;
    float timeStep;
    float dissipation;
};

float gridSize = float(N);

vec2 getVelocityAt(vec2 coord){
    int i = int(coord.y * (N + 2) + coord.x);
    return vec2(u[i], v[i]);
}

vec2 getVelocityAt(int index){
    return vec2(u[index], v[index]);
}

vec3 colorAt(vec2 p){
    vec2 uv = (p + 0.5)/gridSize;
    return texture(colorIn, uv).rgb;
}


void main(){
    vec2 size = vec2(gl_WorkGroupSize.xy * gl_NumWorkGroups.xy);
    vec2 p = vec2(gl_GlobalInvocationID.xy);
    int index = int((p.y+1) * (N + 2) + (p.x+1));

    if(index >= (N+2) * (N+2)) return;

    float dt = timeStep * gridSize;
    vec2 vel = getVelocityAt(index);
    p = p - dt * vel;

    vec2 p0 = floor(p) + 0;
    vec2 p1 = p0 + vec2(1, 0);
    vec2 p2 = p0 + vec2(0, 1);
    vec2 p3 = p1 + vec2(0, 1);

    vec2 t = p - p0;

    vec3 c0 = colorAt(p0);
    vec3 c1 = colorAt(p1);
    vec3 c2 = colorAt(p2);
    vec3 c3 = colorAt(p3);
    vec3 color = mix(mix(c0, c1, t.x), mix(c2, c3, t.x), t.y);

//    p = floor(p);
//    vec2 uv = p/gridSize;
//    vec3 color = texture(colorIn, uv).rgb;

    vec2 uv_out = vec2(gl_GlobalInvocationID.xy)/gridSize;
    ivec2 coord = ivec2(imageSize(colorOut) * uv_out);

    imageStore(colorOut, coord, vec4(color, 1));

}