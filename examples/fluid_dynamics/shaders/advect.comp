#version 450

layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0) buffer VelocityHorizontalComp {
    float u[];
};

layout(set = 0, binding = 1) buffer VelocityVerticalComp {
    float v[];
};

layout(set = 1, binding = 0) buffer  PreviousQuantity {
    float quantity0[];
};

layout(set = 2, binding = 0) buffer  Quantity {
    float quantity[];
};

layout(push_constant) uniform Constants {
    int N;
    float timeStep;
    float dissipation;
};

vec2 getVelocityAt(vec2 coord){
    int i = int(coord.y * (N + 2) + coord.x);
    return vec2(u[i], v[i]);
}

vec2 getVelocityAt(int index){
    return vec2(u[index], v[index]);
}

float  getQuantityAt(vec2 coord){
    int i = int(coord.y * (N + 2) + coord.x);
    return quantity0[i];
}

const ivec2 neighbours[4] = ivec2[4](ivec2(-1, 0), ivec2(1, 0), ivec2(0, -1), ivec2(0, 1));


void main(){
    if(gl_GlobalInvocationID.x >= N || gl_GlobalInvocationID.y >= N){
        return;
    }

    vec2 p = vec2(gl_GlobalInvocationID.xy) + 1;
    int index = int(p.y * (N + 2) + p.x);

    float gridSize = float(N);
    float dt = timeStep * gridSize;
    vec2 vel = getVelocityAt(p);
    p = p - dt * vel;

    p = clamp(p, vec2(0.5), vec2(gridSize+0.5));

    vec2 p0 = floor(p);
    vec2 p1 = p0 + vec2(1, 0);
    vec2 p2 = p0 + vec2(0, 1);
    vec2 p3 = p1 + vec2(0, 1);

    vec2 t = p - p0;

    float q0 = getQuantityAt(p0);
    float q1 = getQuantityAt(p1);
    float q2 = getQuantityAt(p2);
    float q3 = getQuantityAt(p3);

    float q = mix(mix(q0, q1, t.x), mix(q2, q3, t.x), t.y);

    quantity[index] = dissipation * q;
}